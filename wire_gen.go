// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"fiap-tech-challenge-pedidos/internal/adapters/http"
	"fiap-tech-challenge-pedidos/internal/adapters/http/handlers"
	"fiap-tech-challenge-pedidos/internal/adapters/http/middlewares/auth"
	"fiap-tech-challenge-pedidos/internal/adapters/repository"
	"fiap-tech-challenge-pedidos/internal/core/usecase"
	"fiap-tech-challenge-pedidos/internal/core/usecase/mapper"
	"fiap-tech-challenge-pedidos/internal/util"
)

// Injectors from wire.go:

func InitializeWebServer() (*http.Server, error) {
	healthCheck := handlers.NewHealthCheck()
	validator := util.NewCustomValidator()
	dbConnector := repository.NewMySQLConnector()
	pedidoRepo := repository.NewPedidoRepo(dbConnector)
	pedido := mapper.NewPedidoMapper()
	listarPedidoPorStatus := usecase.NewListaPedidoPorStatus(pedidoRepo, pedido)
	listarTodosPedidos := usecase.NewListaTodosPedidos(pedidoRepo, pedido)
	cadastrarPedido := usecase.NewCadastraPedido(pedidoRepo, pedido)
	atualizaStatusPedidoUC := usecase.NewAtualizaStatusPedidoUC(pedidoRepo)
	pegarDetalhePedido := usecase.NewPegaDetalhePedido(pedidoRepo, pedido)
	token := auth.NewJwtToken()
	handlersPedido := handlers.NewPedido(validator, listarPedidoPorStatus, listarTodosPedidos, cadastrarPedido, atualizaStatusPedidoUC, pegarDetalhePedido, token)
	server := http.NewAPIServer(healthCheck, handlersPedido)
	return server, nil
}
