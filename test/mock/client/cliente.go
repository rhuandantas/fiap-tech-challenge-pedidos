// Code generated by MockGen. DO NOT EDIT.
// Source: client/cliente.go
//
// Generated by this command:
//
//	mockgen -source=client/cliente.go -package=mock_client -destination=test/mock/client/cliente.go
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCliente is a mock of Cliente interface.
type MockCliente struct {
	ctrl     *gomock.Controller
	recorder *MockClienteMockRecorder
}

// MockClienteMockRecorder is the mock recorder for MockCliente.
type MockClienteMockRecorder struct {
	mock *MockCliente
}

// NewMockCliente creates a new mock instance.
func NewMockCliente(ctrl *gomock.Controller) *MockCliente {
	mock := &MockCliente{ctrl: ctrl}
	mock.recorder = &MockClienteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCliente) EXPECT() *MockClienteMockRecorder {
	return m.recorder
}

// PesquisaPorID mocks base method.
func (m *MockCliente) PesquisaPorID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PesquisaPorID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// PesquisaPorID indicates an expected call of PesquisaPorID.
func (mr *MockClienteMockRecorder) PesquisaPorID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PesquisaPorID", reflect.TypeOf((*MockCliente)(nil).PesquisaPorID), ctx, id)
}
