// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/usecases/mapper/pedido.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/usecases/mapper/pedido.go -package=mock_mapper -destination=test/mock/mapper/pedido.go
//

// Package mock_mapper is a generated GoMock package.
package mock_mapper

import (
	domain "fiap-tech-challenge-pedidos/internal/core/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPedido is a mock of Pedido interface.
type MockPedido struct {
	ctrl     *gomock.Controller
	recorder *MockPedidoMockRecorder
}

// MockPedidoMockRecorder is the mock recorder for MockPedido.
type MockPedidoMockRecorder struct {
	mock *MockPedido
}

// NewMockPedido creates a new mock instance.
func NewMockPedido(ctrl *gomock.Controller) *MockPedido {
	mock := &MockPedido{ctrl: ctrl}
	mock.recorder = &MockPedidoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPedido) EXPECT() *MockPedidoMockRecorder {
	return m.recorder
}

// MapDTOToModel mocks base method.
func (m *MockPedido) MapDTOToModel(req *domain.PedidoDTO) *domain.Pedido {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapDTOToModel", req)
	ret0, _ := ret[0].(*domain.Pedido)
	return ret0
}

// MapDTOToModel indicates an expected call of MapDTOToModel.
func (mr *MockPedidoMockRecorder) MapDTOToModel(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapDTOToModel", reflect.TypeOf((*MockPedido)(nil).MapDTOToModel), req)
}

// MapDTOToModels mocks base method.
func (m *MockPedido) MapDTOToModels(req []*domain.PedidoDTO) []*domain.Pedido {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapDTOToModels", req)
	ret0, _ := ret[0].([]*domain.Pedido)
	return ret0
}

// MapDTOToModels indicates an expected call of MapDTOToModels.
func (mr *MockPedidoMockRecorder) MapDTOToModels(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapDTOToModels", reflect.TypeOf((*MockPedido)(nil).MapDTOToModels), req)
}

// MapDTOToResponse mocks base method.
func (m *MockPedido) MapDTOToResponse(dto *domain.PedidoDTO) *domain.PedidoResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapDTOToResponse", dto)
	ret0, _ := ret[0].(*domain.PedidoResponse)
	return ret0
}

// MapDTOToResponse indicates an expected call of MapDTOToResponse.
func (mr *MockPedidoMockRecorder) MapDTOToResponse(dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapDTOToResponse", reflect.TypeOf((*MockPedido)(nil).MapDTOToResponse), dto)
}

// MapReqToDTO mocks base method.
func (m *MockPedido) MapReqToDTO(req *domain.PedidoRequest) *domain.PedidoDTO {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapReqToDTO", req)
	ret0, _ := ret[0].(*domain.PedidoDTO)
	return ret0
}

// MapReqToDTO indicates an expected call of MapReqToDTO.
func (mr *MockPedidoMockRecorder) MapReqToDTO(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapReqToDTO", reflect.TypeOf((*MockPedido)(nil).MapReqToDTO), req)
}
