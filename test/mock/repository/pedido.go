// Code generated by MockGen. DO NOT EDIT.
// Source: internal/adapters/repository/pedido.go
//
// Generated by this command:
//
//	mockgen -source=internal/adapters/repository/pedido.go -package=mock_repo -destination=test/mock/repository/pedido.go
//

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	domain "fiap-tech-challenge-pedidos/internal/core/domain"
	reflect "reflect"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	gomock "go.uber.org/mock/gomock"
)

// MockPedidoRepo is a mock of PedidoRepo interface.
type MockPedidoRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPedidoRepoMockRecorder
}

// MockPedidoRepoMockRecorder is the mock recorder for MockPedidoRepo.
type MockPedidoRepoMockRecorder struct {
	mock *MockPedidoRepo
}

// NewMockPedidoRepo creates a new mock instance.
func NewMockPedidoRepo(ctrl *gomock.Controller) *MockPedidoRepo {
	mock := &MockPedidoRepo{ctrl: ctrl}
	mock.recorder = &MockPedidoRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPedidoRepo) EXPECT() *MockPedidoRepoMockRecorder {
	return m.recorder
}

// AtualizaStatus mocks base method.
func (m *MockPedidoRepo) AtualizaStatus(ctx context.Context, status string, id primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AtualizaStatus", ctx, status, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AtualizaStatus indicates an expected call of AtualizaStatus.
func (mr *MockPedidoRepoMockRecorder) AtualizaStatus(ctx, status, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtualizaStatus", reflect.TypeOf((*MockPedidoRepo)(nil).AtualizaStatus), ctx, status, id)
}

// Insere mocks base method.
func (m *MockPedidoRepo) Insere(ctx context.Context, pedido *domain.PedidoDTO) (*domain.PedidoDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insere", ctx, pedido)
	ret0, _ := ret[0].(*domain.PedidoDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insere indicates an expected call of Insere.
func (mr *MockPedidoRepoMockRecorder) Insere(ctx, pedido any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insere", reflect.TypeOf((*MockPedidoRepo)(nil).Insere), ctx, pedido)
}

// PesquisaPorID mocks base method.
func (m *MockPedidoRepo) PesquisaPorID(ctx context.Context, id primitive.ObjectID) (*domain.PedidoDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PesquisaPorID", ctx, id)
	ret0, _ := ret[0].(*domain.PedidoDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PesquisaPorID indicates an expected call of PesquisaPorID.
func (mr *MockPedidoRepoMockRecorder) PesquisaPorID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PesquisaPorID", reflect.TypeOf((*MockPedidoRepo)(nil).PesquisaPorID), ctx, id)
}

// PesquisaPorStatus mocks base method.
func (m *MockPedidoRepo) PesquisaPorStatus(ctx context.Context, statuses []string) ([]*domain.PedidoDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PesquisaPorStatus", ctx, statuses)
	ret0, _ := ret[0].([]*domain.PedidoDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PesquisaPorStatus indicates an expected call of PesquisaPorStatus.
func (mr *MockPedidoRepoMockRecorder) PesquisaPorStatus(ctx, statuses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PesquisaPorStatus", reflect.TypeOf((*MockPedidoRepo)(nil).PesquisaPorStatus), ctx, statuses)
}

// PesquisaTodos mocks base method.
func (m *MockPedidoRepo) PesquisaTodos(ctx context.Context) ([]*domain.PedidoDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PesquisaTodos", ctx)
	ret0, _ := ret[0].([]*domain.PedidoDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PesquisaTodos indicates an expected call of PesquisaTodos.
func (mr *MockPedidoRepoMockRecorder) PesquisaTodos(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PesquisaTodos", reflect.TypeOf((*MockPedidoRepo)(nil).PesquisaTodos), ctx)
}
