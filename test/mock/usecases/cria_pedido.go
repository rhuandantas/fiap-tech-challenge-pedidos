// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/usecases/cria_pedido.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/usecases/cria_pedido.go -package=mock_usecases -destination=test/mock/usecases/cria_pedido.go
//

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	domain "fiap-tech-challenge-pedidos/internal/core/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCadastrarPedido is a mock of CadastrarPedido interface.
type MockCadastrarPedido struct {
	ctrl     *gomock.Controller
	recorder *MockCadastrarPedidoMockRecorder
}

// MockCadastrarPedidoMockRecorder is the mock recorder for MockCadastrarPedido.
type MockCadastrarPedidoMockRecorder struct {
	mock *MockCadastrarPedido
}

// NewMockCadastrarPedido creates a new mock instance.
func NewMockCadastrarPedido(ctrl *gomock.Controller) *MockCadastrarPedido {
	mock := &MockCadastrarPedido{ctrl: ctrl}
	mock.recorder = &MockCadastrarPedidoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCadastrarPedido) EXPECT() *MockCadastrarPedidoMockRecorder {
	return m.recorder
}

// Cadastra mocks base method.
func (m *MockCadastrarPedido) Cadastra(ctx context.Context, pedido *domain.PedidoRequest) (*domain.PedidoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cadastra", ctx, pedido)
	ret0, _ := ret[0].(*domain.PedidoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cadastra indicates an expected call of Cadastra.
func (mr *MockCadastrarPedidoMockRecorder) Cadastra(ctx, pedido any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cadastra", reflect.TypeOf((*MockCadastrarPedido)(nil).Cadastra), ctx, pedido)
}
